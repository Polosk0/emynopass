#!/bin/bash

echo "üîç DIAGNOSTIC COMPLET - EMYNOPASS AUTHENTIFICATION"
echo "=================================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# V√©rifier si Docker est en cours d'ex√©cution
echo "1. V√âRIFICATION DOCKER"
echo "----------------------"
if docker-compose ps | grep -q "Up"; then
    print_result 0 "Docker Compose est en cours d'ex√©cution"
    docker-compose ps
else
    print_result 1 "Docker Compose n'est pas en cours d'ex√©cution"
    echo "D√©marrage des services..."
    docker-compose up -d
    sleep 10
fi
echo ""

# V√©rifier les logs du backend
echo "2. V√âRIFICATION LOGS BACKEND"
echo "----------------------------"
print_info "Derni√®res lignes des logs backend:"
docker-compose logs --tail=20 backend
echo ""

# V√©rifier les variables d'environnement
echo "3. V√âRIFICATION VARIABLES D'ENVIRONNEMENT"
echo "----------------------------------------"
print_info "Variables d'environnement du backend:"
docker-compose exec backend printenv | grep -E "(NODE_ENV|PORT|JWT_SECRET|FRONTEND_URL)" || print_warning "Impossible de r√©cup√©rer les variables d'environnement"
echo ""

# V√©rifier la connexion √† la base de donn√©es
echo "4. V√âRIFICATION BASE DE DONN√âES"
echo "-------------------------------"
print_info "Test de connexion √† la base de donn√©es:"
docker-compose exec backend node -e "
const { database } = require('./dist/database');
database.getUserCount().then(count => {
  console.log('‚úÖ Connexion DB OK - Nombre d\'utilisateurs:', count);
}).catch(err => {
  console.log('‚ùå Erreur DB:', err.message);
});
" 2>/dev/null || print_warning "Impossible de tester la base de donn√©es"
echo ""

# Lister les utilisateurs existants
echo "5. LISTE DES UTILISATEURS"
echo "------------------------"
print_info "Utilisateurs existants dans la base de donn√©es:"
docker-compose exec backend node -e "
const { database } = require('./dist/database');
database.getAllUsers().then(users => {
  if (users.length === 0) {
    console.log('‚ùå Aucun utilisateur trouv√©');
  } else {
    console.log('‚úÖ Utilisateurs trouv√©s:');
    users.forEach(user => {
      console.log(\`  - \${user.email} (\${user.role}) - Actif: \${user.isActive} - D√©mo: \${user.isDemo}\`);
    });
  }
}).catch(err => {
  console.log('‚ùå Erreur:', err.message);
});
" 2>/dev/null || print_warning "Impossible de lister les utilisateurs"
echo ""

# Tester l'API de sant√©
echo "6. TEST API DE SANT√â"
echo "-------------------"
print_info "Test de l'endpoint /health:"
if curl -s -f http://localhost:3001/health > /dev/null; then
    print_result 0 "API de sant√© accessible"
    curl -s http://localhost:3001/health | jq . 2>/dev/null || curl -s http://localhost:3001/health
else
    print_result 1 "API de sant√© inaccessible"
fi
echo ""

# Tester l'API publique
echo "7. TEST API PUBLIQUE"
echo "-------------------"
print_info "Test de l'endpoint /api/public/stats:"
if curl -s -f http://localhost:3001/api/public/stats > /dev/null; then
    print_result 0 "API publique accessible"
    curl -s http://localhost:3001/api/public/stats | jq . 2>/dev/null || curl -s http://localhost:3001/api/public/stats
else
    print_result 1 "API publique inaccessible"
fi
echo ""

# Tester la connexion admin
echo "8. TEST CONNEXION ADMIN"
echo "----------------------"
print_info "Test de connexion avec le compte admin:"
ADMIN_RESPONSE=$(curl -s -X POST http://localhost:3001/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "polosko@emynopass.dev", "password": "Emynopass2024!"}')

if echo "$ADMIN_RESPONSE" | grep -q "token"; then
    print_result 0 "Connexion admin r√©ussie"
    echo "$ADMIN_RESPONSE" | jq . 2>/dev/null || echo "$ADMIN_RESPONSE"
else
    print_result 1 "Connexion admin √©chou√©e"
    echo "$ADMIN_RESPONSE"
fi
echo ""

# Tester la connexion d√©mo
echo "9. TEST CONNEXION D√âMO"
echo "---------------------"
print_info "Test de connexion avec le compte d√©mo:"
DEMO_RESPONSE=$(curl -s -X POST http://localhost:3001/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "demo@emynopass.dev", "password": "demo2024"}')

if echo "$DEMO_RESPONSE" | grep -q "token"; then
    print_result 0 "Connexion d√©mo r√©ussie"
    echo "$DEMO_RESPONSE" | jq . 2>/dev/null || echo "$DEMO_RESPONSE"
else
    print_result 1 "Connexion d√©mo √©chou√©e"
    echo "$DEMO_RESPONSE"
fi
echo ""

# V√©rifier les ports
echo "10. V√âRIFICATION PORTS"
echo "---------------------"
print_info "Ports en √©coute:"
netstat -tlnp | grep -E ":300[01]|:80|:443" || ss -tlnp | grep -E ":300[01]|:80|:443"
echo ""

# V√©rifier les certificats SSL
echo "11. V√âRIFICATION SSL"
echo "-------------------"
print_info "Test de l'acc√®s HTTPS:"
if curl -s -f https://emynona.cloud/health > /dev/null; then
    print_result 0 "HTTPS accessible"
else
    print_result 1 "HTTPS inaccessible"
fi
echo ""

# V√©rifier la configuration Nginx
echo "12. V√âRIFICATION NGINX"
echo "---------------------"
if command -v nginx >/dev/null 2>&1; then
    print_info "Statut Nginx:"
    systemctl status nginx --no-pager -l || print_warning "Impossible de v√©rifier le statut Nginx"
    
    print_info "Configuration Nginx:"
    nginx -t 2>&1 || print_warning "Erreur dans la configuration Nginx"
else
    print_warning "Nginx n'est pas install√©"
fi
echo ""

# R√©sum√© et recommandations
echo "13. R√âSUM√â ET RECOMMANDATIONS"
echo "============================="
echo ""

# V√©rifier si des probl√®mes ont √©t√© d√©tect√©s
PROBLEMS=0

if ! docker-compose ps | grep -q "Up"; then
    print_warning "Probl√®me: Docker Compose n'est pas en cours d'ex√©cution"
    PROBLEMS=$((PROBLEMS + 1))
fi

if ! curl -s -f http://localhost:3001/health > /dev/null; then
    print_warning "Probl√®me: API backend inaccessible"
    PROBLEMS=$((PROBLEMS + 1))
fi

if ! echo "$ADMIN_RESPONSE" | grep -q "token"; then
    print_warning "Probl√®me: Connexion admin √©chou√©e"
    PROBLEMS=$((PROBLEMS + 1))
fi

if ! echo "$DEMO_RESPONSE" | grep -q "token"; then
    print_warning "Probl√®me: Connexion d√©mo √©chou√©e"
    PROBLEMS=$((PROBLEMS + 1))
fi

echo ""
if [ $PROBLEMS -eq 0 ]; then
    print_result 0 "Aucun probl√®me d√©tect√© - Le syst√®me fonctionne correctement"
else
    print_warning "$PROBLEMS probl√®me(s) d√©tect√©(s)"
    echo ""
    echo "RECOMMANDATIONS:"
    echo "1. Red√©marrer les services: docker-compose down && docker-compose up -d"
    echo "2. V√©rifier les logs: docker-compose logs -f backend"
    echo "3. R√©initialiser les comptes si n√©cessaire"
    echo "4. V√©rifier la configuration Nginx"
fi

echo ""
echo "üîç Diagnostic termin√© - $(date)"
