#!/bin/bash

echo "üîß CORRECTION ERREUR SESSIONS DUPLIQU√âES - EMYNOPASS"
echo "===================================================="
echo ""

# Fonction pour v√©rifier les sessions existantes
check_sessions() {
    echo "üìã 1. V√âRIFICATION DES SESSIONS"
    echo "-------------------------------"
    
    echo "üîç Nombre de sessions existantes:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "SELECT COUNT(*) as total_sessions FROM sessions;"
    
    echo ""
    echo "üîç Sessions r√©centes (derni√®res 10):"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "SELECT id, user_id, token, created_at, expires_at FROM sessions ORDER BY created_at DESC LIMIT 10;"
    
    echo ""
    echo "üîç Sessions expir√©es:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "SELECT COUNT(*) as expired_sessions FROM sessions WHERE expires_at < NOW();"
    
    echo ""
}

# Fonction pour nettoyer les sessions
cleanup_sessions() {
    echo "üìã 2. NETTOYAGE DES SESSIONS"
    echo "----------------------------"
    
    echo "üßπ Suppression des sessions expir√©es..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "DELETE FROM sessions WHERE expires_at < NOW();"
    
    echo "üßπ Suppression des sessions anciennes (plus de 7 jours)..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "DELETE FROM sessions WHERE created_at < NOW() - INTERVAL '7 days';"
    
    echo "üßπ Suppression des sessions dupliqu√©es (garder la plus r√©cente)..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        DELETE FROM sessions 
        WHERE id NOT IN (
            SELECT DISTINCT ON (user_id) id 
            FROM sessions 
            ORDER BY user_id, created_at DESC
        );"
    
    echo "‚úÖ Nettoyage des sessions termin√©"
    echo ""
}

# Fonction pour v√©rifier les contraintes
check_constraints() {
    echo "üìã 3. V√âRIFICATION DES CONTRAINTES"
    echo "----------------------------------"
    
    echo "üîç Contraintes sur la table sessions:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\d sessions"
    
    echo ""
    echo "üîç Index sur la table sessions:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "SELECT indexname, indexdef FROM pg_indexes WHERE tablename = 'sessions';"
    
    echo ""
}

# Fonction pour recr√©er la table sessions
recreate_sessions_table() {
    echo "üìã 4. RECR√âATION DE LA TABLE SESSIONS"
    echo "------------------------------------"
    
    echo "üõë Sauvegarde des sessions valides..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE IF NOT EXISTS sessions_backup AS 
        SELECT * FROM sessions 
        WHERE expires_at > NOW() 
        AND created_at > NOW() - INTERVAL '1 day';"
    
    echo "üóëÔ∏è Suppression de la table sessions..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "DROP TABLE IF EXISTS sessions CASCADE;"
    
    echo "üîß Recr√©ation de la table sessions..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE sessions (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            token TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            expires_at TIMESTAMP WITH TIME ZONE NOT NULL
        );"
    
    echo "üîß Cr√©ation des index..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE INDEX idx_sessions_user_id ON sessions(user_id);
        CREATE INDEX idx_sessions_token ON sessions(token);
        CREATE INDEX idx_sessions_expires_at ON sessions(expires_at);"
    
    echo "üì• Restauration des sessions valides..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        INSERT INTO sessions (id, user_id, token, created_at, expires_at)
        SELECT id, user_id, token, created_at, expires_at
        FROM sessions_backup
        ON CONFLICT (token) DO NOTHING;"
    
    echo "üßπ Suppression de la table de sauvegarde..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "DROP TABLE IF EXISTS sessions_backup;"
    
    echo "‚úÖ Table sessions recr√©√©e"
    echo ""
}

# Fonction pour red√©marrer les services
restart_services() {
    echo "üìã 5. RED√âMARRAGE DES SERVICES"
    echo "------------------------------"
    
    echo "üõë Arr√™t des services..."
    docker-compose down
    
    echo "‚è≥ Attente de 10 secondes..."
    sleep 10
    
    echo "üöÄ Red√©marrage des services..."
    docker-compose up -d
    
    echo "‚è≥ Attente du d√©marrage (30 secondes)..."
    sleep 30
    
    echo "üîç V√©rification du statut..."
    docker-compose ps
    
    echo "‚úÖ Services red√©marr√©s"
    echo ""
}

# Fonction pour tester l'authentification
test_auth() {
    echo "üìã 6. TEST D'AUTHENTIFICATION"
    echo "-----------------------------"
    
    # Test direct du backend
    echo "üîç Test auth direct backend..."
    local auth_backend=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST http://localhost:3001/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local auth_backend_status=$(echo "$auth_backend" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local auth_backend_body=$(echo "$auth_backend" | sed 's/HTTPSTATUS:[0-9]*$//')
    
    echo "   - Status: $auth_backend_status"
    if [ "$auth_backend_status" = "200" ]; then
        echo "‚úÖ Auth backend OK"
        local token=$(echo "$auth_backend_body" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$token" ]; then
            echo "‚úÖ Token obtenu: ${token:0:20}..."
        else
            echo "‚ùå Token non trouv√© dans la r√©ponse"
        fi
    else
        echo "‚ùå Auth backend √©chou√©"
        echo "   - R√©ponse: $auth_backend_body"
    fi
    
    # Test via Cloudflare
    echo "üîç Test auth via Cloudflare..."
    local auth_cloudflare=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST https://emynona.cloud/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local auth_cloudflare_status=$(echo "$auth_cloudflare" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local auth_cloudflare_body=$(echo "$auth_cloudflare" | sed 's/HTTPSTATUS:[0-9]*$//')
    
    echo "   - Status: $auth_cloudflare_status"
    if [ "$auth_cloudflare_status" = "200" ]; then
        echo "‚úÖ Auth Cloudflare OK"
        local token=$(echo "$auth_cloudflare_body" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$token" ]; then
            echo "‚úÖ Token obtenu: ${token:0:20}..."
        else
            echo "‚ùå Token non trouv√© dans la r√©ponse"
        fi
    else
        echo "‚ùå Auth Cloudflare √©chou√©"
        echo "   - R√©ponse: $auth_cloudflare_body"
    fi
    
    echo ""
}

# Fonction pour tester l'upload
test_upload() {
    echo "üìã 7. TEST D'UPLOAD"
    echo "-------------------"
    
    # Obtenir un token
    echo "üîê Connexion pour obtenir un token..."
    local token_response=$(curl -s -X POST https://emynona.cloud/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local token=$(echo "$token_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    
    if [ -z "$token" ]; then
        echo "‚ùå Impossible d'obtenir un token"
        return 1
    fi
    
    echo "‚úÖ Token obtenu: ${token:0:20}..."
    
    # Cr√©er un fichier de test de 1MB
    echo "üîç Cr√©ation d'un fichier de test de 1MB..."
    dd if=/dev/zero of=/tmp/test-1mb.bin bs=1M count=1 2>/dev/null
    
    # Test d'upload
    echo "üîç Test d'upload (1MB)..."
    local upload_response=$(curl -s -w "HTTPSTATUS:%{http_code}|TIME:%{time_total}" \
        -X POST https://emynona.cloud/api/upload/files \
        -H "Authorization: Bearer $token" \
        -F "files=@/tmp/test-1mb.bin")
    
    local upload_status=$(echo "$upload_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local upload_time=$(echo "$upload_response" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
    local upload_body=$(echo "$upload_response" | sed 's/HTTPSTATUS:[0-9]*|TIME:[0-9.]*$//')
    
    echo "   - Status: $upload_status"
    echo "   - Temps: ${upload_time}s"
    
    if [ "$upload_status" = "200" ]; then
        echo "‚úÖ Upload r√©ussi"
    else
        echo "‚ùå Upload √©chou√©"
        echo "   - R√©ponse: $upload_body"
    fi
    
    # Nettoyer
    rm -f /tmp/test-1mb.bin
    echo "‚úÖ Fichier de test supprim√©"
    
    echo ""
}

# Fonction principale
main() {
    check_sessions
    cleanup_sessions
    check_constraints
    
    # Demander confirmation pour recr√©er la table
    echo "‚ö†Ô∏è ATTENTION: Recr√©ation de la table sessions"
    echo "Cette op√©ration supprimera toutes les sessions existantes."
    echo "Voulez-vous continuer ? (y/N)"
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        recreate_sessions_table
        restart_services
        test_auth
        test_upload
    else
        echo "‚ùå Op√©ration annul√©e"
        echo "üí° Vous pouvez ex√©cuter le script √† nouveau pour recr√©er la table"
    fi
    
    echo "üéØ CORRECTION TERMIN√âE"
    echo "====================="
}

# Ex√©cuter le script principal
main
