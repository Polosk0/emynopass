#!/bin/bash

echo "üîß CORRECTION ERREUR 500 AUTHENTIFICATION - EMYNOPASS"
echo "====================================================="
echo ""

# Fonction pour v√©rifier les logs backend
check_backend_logs() {
    echo "üìã 1. V√âRIFICATION LOGS BACKEND"
    echo "-------------------------------"
    
    echo "üîç Logs backend r√©cents (derni√®res 20 lignes):"
    docker-compose logs --tail=20 backend
    
    echo ""
    echo "üîç Logs backend avec erreurs:"
    docker-compose logs --tail=50 backend | grep -E "(ERROR|error|Error|500|auth|login)"
    
    echo ""
}

# Fonction pour v√©rifier la configuration backend
check_backend_config() {
    echo "üìã 2. V√âRIFICATION CONFIGURATION BACKEND"
    echo "---------------------------------------"
    
    echo "üîç Variables d'environnement backend:"
    docker exec emynopass-backend env | grep -E "(NODE_ENV|PORT|JWT_SECRET|FRONTEND_URL|DATABASE)"
    
    echo ""
    echo "üîç Configuration Express (limites):"
    docker exec emynopass-backend cat /app/src/index.ts | grep -E "(express\.json|express\.urlencoded|limit)" || echo "Configuration non trouv√©e"
    
    echo ""
    echo "üîç Configuration Multer (limites):"
    docker exec emynopass-backend cat /app/src/routes/upload.ts | grep -E "(fileSize|fieldSize|limits)" || echo "Configuration non trouv√©e"
    
    echo ""
}

# Fonction pour v√©rifier la base de donn√©es
check_database() {
    echo "üìã 3. V√âRIFICATION BASE DE DONN√âES"
    echo "---------------------------------"
    
    echo "üîç Test de connexion PostgreSQL:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "SELECT version();"
    
    echo ""
    echo "üîç V√©rification des tables:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\dt"
    
    echo ""
    echo "üîç V√©rification des utilisateurs:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "SELECT id, email, role, created_at FROM users LIMIT 5;"
    
    echo ""
}

# Fonction pour red√©marrer les services
restart_services() {
    echo "üìã 4. RED√âMARRAGE DES SERVICES"
    echo "------------------------------"
    
    echo "üõë Arr√™t des services..."
    docker-compose down
    
    echo "‚è≥ Attente de 10 secondes..."
    sleep 10
    
    echo "üöÄ Red√©marrage des services..."
    docker-compose up -d
    
    echo "‚è≥ Attente du d√©marrage (30 secondes)..."
    sleep 30
    
    echo "üîç V√©rification du statut..."
    docker-compose ps
    
    echo "‚úÖ Services red√©marr√©s"
    echo ""
}

# Fonction pour tester l'authentification
test_auth() {
    echo "üìã 5. TEST D'AUTHENTIFICATION"
    echo "-----------------------------"
    
    # Test direct du backend
    echo "üîç Test auth direct backend..."
    local auth_backend=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST http://localhost:3001/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local auth_backend_status=$(echo "$auth_backend" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local auth_backend_body=$(echo "$auth_backend" | sed 's/HTTPSTATUS:[0-9]*$//')
    
    echo "   - Status: $auth_backend_status"
    if [ "$auth_backend_status" = "200" ]; then
        echo "‚úÖ Auth backend OK"
        local token=$(echo "$auth_backend_body" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$token" ]; then
            echo "‚úÖ Token obtenu: ${token:0:20}..."
        else
            echo "‚ùå Token non trouv√© dans la r√©ponse"
        fi
    else
        echo "‚ùå Auth backend √©chou√©"
        echo "   - R√©ponse: $auth_backend_body"
    fi
    
    # Test via Cloudflare
    echo "üîç Test auth via Cloudflare..."
    local auth_cloudflare=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST https://emynona.cloud/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local auth_cloudflare_status=$(echo "$auth_cloudflare" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local auth_cloudflare_body=$(echo "$auth_cloudflare" | sed 's/HTTPSTATUS:[0-9]*$//')
    
    echo "   - Status: $auth_cloudflare_status"
    if [ "$auth_cloudflare_status" = "200" ]; then
        echo "‚úÖ Auth Cloudflare OK"
        local token=$(echo "$auth_cloudflare_body" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$token" ]; then
            echo "‚úÖ Token obtenu: ${token:0:20}..."
        else
            echo "‚ùå Token non trouv√© dans la r√©ponse"
        fi
    else
        echo "‚ùå Auth Cloudflare √©chou√©"
        echo "   - R√©ponse: $auth_cloudflare_body"
    fi
    
    echo ""
}

# Fonction pour tester l'upload
test_upload() {
    echo "üìã 6. TEST D'UPLOAD"
    echo "-------------------"
    
    # Obtenir un token via backend direct
    echo "üîê Connexion pour obtenir un token (backend direct)..."
    local token_response=$(curl -s -X POST http://localhost:3001/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local token=$(echo "$token_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    
    if [ -z "$token" ]; then
        echo "‚ùå Impossible d'obtenir un token"
        return 1
    fi
    
    echo "‚úÖ Token obtenu: ${token:0:20}..."
    
    # Cr√©er un fichier de test de 1MB
    echo "üîç Cr√©ation d'un fichier de test de 1MB..."
    dd if=/dev/zero of=/tmp/test-1mb.bin bs=1M count=1 2>/dev/null
    
    # Test d'upload via backend direct
    echo "üîç Test d'upload via backend direct (1MB)..."
    local upload_response=$(curl -s -w "HTTPSTATUS:%{http_code}|TIME:%{time_total}" \
        -X POST http://localhost:3001/api/upload/files \
        -H "Authorization: Bearer $token" \
        -F "files=@/tmp/test-1mb.bin")
    
    local upload_status=$(echo "$upload_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local upload_time=$(echo "$upload_response" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
    local upload_body=$(echo "$upload_response" | sed 's/HTTPSTATUS:[0-9]*|TIME:[0-9.]*$//')
    
    echo "   - Status: $upload_status"
    echo "   - Temps: ${upload_time}s"
    
    if [ "$upload_status" = "200" ]; then
        echo "‚úÖ Upload backend direct r√©ussi"
    else
        echo "‚ùå Upload backend direct √©chou√©"
        echo "   - R√©ponse: $upload_body"
    fi
    
    # Test d'upload via Cloudflare
    echo "üîç Test d'upload via Cloudflare (1MB)..."
    local upload_cloudflare=$(curl -s -w "HTTPSTATUS:%{http_code}|TIME:%{time_total}" \
        -X POST https://emynona.cloud/api/upload/files \
        -H "Authorization: Bearer $token" \
        -F "files=@/tmp/test-1mb.bin")
    
    local upload_cloudflare_status=$(echo "$upload_cloudflare" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local upload_cloudflare_time=$(echo "$upload_cloudflare" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
    local upload_cloudflare_body=$(echo "$upload_cloudflare" | sed 's/HTTPSTATUS:[0-9]*|TIME:[0-9.]*$//')
    
    echo "   - Status: $upload_cloudflare_status"
    echo "   - Temps: ${upload_cloudflare_time}s"
    
    if [ "$upload_cloudflare_status" = "200" ]; then
        echo "‚úÖ Upload Cloudflare r√©ussi"
    else
        echo "‚ùå Upload Cloudflare √©chou√©"
        echo "   - R√©ponse: $upload_cloudflare_body"
    fi
    
    # Nettoyer
    rm -f /tmp/test-1mb.bin
    echo "‚úÖ Fichier de test supprim√©"
    
    echo ""
}

# Fonction pour afficher les recommandations
show_recommendations() {
    echo "üìã 7. RECOMMANDATIONS"
    echo "--------------------"
    
    echo "üîß Actions recommand√©es:"
    echo ""
    echo "1. Si l'auth backend fonctionne mais pas Cloudflare:"
    echo "   - Probl√®me de configuration Cloudflare"
    echo "   - V√©rifier les Page Rules pour /api/auth/*"
    echo "   - D√©sactiver WAF pour /api/auth/*"
    echo "   - Augmenter les timeouts Cloudflare"
    echo ""
    echo "2. Si l'upload backend fonctionne mais pas Cloudflare:"
    echo "   - Probl√®me de configuration Cloudflare"
    echo "   - V√©rifier les Page Rules pour /api/upload/*"
    echo "   - D√©sactiver WAF pour /api/upload/*"
    echo "   - Augmenter les timeouts Cloudflare"
    echo ""
    echo "3. Configuration Cloudflare recommand√©e:"
    echo "   - Page Rules pour /api/*:"
    echo "     * Cache Level: Bypass"
    echo "     * Browser Cache TTL: Respect Existing Headers"
    echo "     * Edge Cache TTL: 2 hours"
    echo "   - Security Level: Essentially Off"
    echo "   - Rate Limiting: Disabled"
    echo "   - WAF Rules: Disabled"
    echo "   - Timeouts: 600 seconds"
    echo ""
}

# Fonction principale
main() {
    check_backend_logs
    check_backend_config
    check_database
    restart_services
    test_auth
    test_upload
    show_recommendations
    
    echo "üéØ CORRECTION TERMIN√âE"
    echo "====================="
}

# Ex√©cuter le script principal
main
