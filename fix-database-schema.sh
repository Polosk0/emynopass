#!/bin/bash

echo "üîß CORRECTION SCH√âMA BASE DE DONN√âES - EMYNOPASS"
echo "================================================"
echo ""

# Fonction pour v√©rifier la structure actuelle
check_current_schema() {
    echo "üìã 1. V√âRIFICATION SCH√âMA ACTUEL"
    echo "--------------------------------"
    
    echo "üîç Tables existantes:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\dt"
    
    echo ""
    echo "üîç Structure de la table sessions:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\d sessions"
    
    echo ""
    echo "üîç Structure de la table users:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\d users"
    
    echo ""
    echo "üîç Structure de la table files:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\d files"
    
    echo ""
    echo "üîç Structure de la table shares:"
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "\d shares"
    
    echo ""
}

# Fonction pour sauvegarder les donn√©es
backup_data() {
    echo "üìã 2. SAUVEGARDE DES DONN√âES"
    echo "----------------------------"
    
    echo "üíæ Sauvegarde des utilisateurs..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE IF NOT EXISTS users_backup AS 
        SELECT * FROM users;"
    
    echo "üíæ Sauvegarde des fichiers..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE IF NOT EXISTS files_backup AS 
        SELECT * FROM files;"
    
    echo "üíæ Sauvegarde des partages..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE IF NOT EXISTS shares_backup AS 
        SELECT * FROM shares;"
    
    echo "‚úÖ Sauvegarde termin√©e"
    echo ""
}

# Fonction pour recr√©er le sch√©ma correct
recreate_schema() {
    echo "üìã 3. RECR√âATION DU SCH√âMA CORRECT"
    echo "---------------------------------"
    
    echo "üóëÔ∏è Suppression des tables existantes..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        DROP TABLE IF EXISTS sessions CASCADE;
        DROP TABLE IF EXISTS shares CASCADE;
        DROP TABLE IF EXISTS files CASCADE;
        DROP TABLE IF EXISTS users CASCADE;"
    
    echo "üîß Cr√©ation de la table users..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            name VARCHAR(255) NOT NULL,
            role VARCHAR(50) DEFAULT 'USER',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );"
    
    echo "üîß Cr√©ation de la table files..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE files (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            filename VARCHAR(255) NOT NULL,
            original_name VARCHAR(255) NOT NULL,
            size BIGINT NOT NULL,
            mime_type VARCHAR(100),
            path VARCHAR(500) NOT NULL,
            uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );"
    
    echo "üîß Cr√©ation de la table shares..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE shares (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            file_id UUID NOT NULL REFERENCES files(id) ON DELETE CASCADE,
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            token VARCHAR(255) UNIQUE NOT NULL,
            expires_at TIMESTAMP WITH TIME ZONE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );"
    
    echo "üîß Cr√©ation de la table sessions..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE TABLE sessions (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            token TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            expires_at TIMESTAMP WITH TIME ZONE NOT NULL
        );"
    
    echo "üîß Cr√©ation des index..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        CREATE INDEX idx_users_email ON users(email);
        CREATE INDEX idx_files_user_id ON files(user_id);
        CREATE INDEX idx_files_uploaded_at ON files(uploaded_at);
        CREATE INDEX idx_shares_file_id ON shares(file_id);
        CREATE INDEX idx_shares_user_id ON shares(user_id);
        CREATE INDEX idx_shares_token ON shares(token);
        CREATE INDEX idx_sessions_user_id ON sessions(user_id);
        CREATE INDEX idx_sessions_token ON sessions(token);
        CREATE INDEX idx_sessions_expires_at ON sessions(expires_at);"
    
    echo "‚úÖ Sch√©ma recr√©√©"
    echo ""
}

# Fonction pour restaurer les donn√©es
restore_data() {
    echo "üìã 4. RESTAURATION DES DONN√âES"
    echo "------------------------------"
    
    echo "üì• Restauration des utilisateurs..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        INSERT INTO users (id, email, password, name, role, created_at, updated_at)
        SELECT id, email, password, name, role, created_at, updated_at
        FROM users_backup
        ON CONFLICT (id) DO NOTHING;"
    
    echo "üì• Restauration des fichiers..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        INSERT INTO files (id, user_id, filename, original_name, size, mime_type, path, uploaded_at)
        SELECT id, user_id, filename, original_name, size, mime_type, path, uploaded_at
        FROM files_backup
        ON CONFLICT (id) DO NOTHING;"
    
    echo "üì• Restauration des partages..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        INSERT INTO shares (id, file_id, user_id, token, expires_at, created_at)
        SELECT id, file_id, user_id, token, expires_at, created_at
        FROM shares_backup
        ON CONFLICT (id) DO NOTHING;"
    
    echo "‚úÖ Donn√©es restaur√©es"
    echo ""
}

# Fonction pour nettoyer les sauvegardes
cleanup_backups() {
    echo "üìã 5. NETTOYAGE DES SAUVEGARDES"
    echo "-------------------------------"
    
    echo "üßπ Suppression des tables de sauvegarde..."
    docker exec emynopass-postgres psql -U emynopass -d emynopass -c "
        DROP TABLE IF EXISTS users_backup;
        DROP TABLE IF EXISTS files_backup;
        DROP TABLE IF EXISTS shares_backup;"
    
    echo "‚úÖ Nettoyage termin√©"
    echo ""
}

# Fonction pour red√©marrer le backend
restart_backend() {
    echo "üìã 6. RED√âMARRAGE DU BACKEND"
    echo "----------------------------"
    
    echo "üõë Arr√™t du backend..."
    docker-compose stop backend
    
    echo "‚è≥ Attente de 5 secondes..."
    sleep 5
    
    echo "üöÄ Red√©marrage du backend..."
    docker-compose up -d backend
    
    echo "‚è≥ Attente du d√©marrage (30 secondes)..."
    sleep 30
    
    echo "‚úÖ Backend red√©marr√©"
    echo ""
}

# Fonction pour tester le syst√®me
test_system() {
    echo "üìã 7. TEST DU SYST√àME"
    echo "---------------------"
    
    # Test de connectivit√©
    echo "üîç Test de connectivit√©..."
    local health_response=$(curl -s -w "HTTPSTATUS:%{http_code}" http://localhost:3001/health)
    local health_status=$(echo "$health_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    
    if [ "$health_status" = "200" ]; then
        echo "‚úÖ Backend accessible"
    else
        echo "‚ùå Backend inaccessible (Status: $health_status)"
        return 1
    fi
    
    # Test d'authentification
    echo "üîç Test d'authentification..."
    local auth_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST http://localhost:3001/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"polosko@emynopass.dev","password":"Emynopass2024!"}')
    
    local auth_status=$(echo "$auth_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    local auth_body=$(echo "$auth_response" | sed 's/HTTPSTATUS:[0-9]*$//')
    
    if [ "$auth_status" = "200" ]; then
        echo "‚úÖ Authentification OK"
        local token=$(echo "$auth_body" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        if [ -n "$token" ]; then
            echo "‚úÖ Token obtenu: ${token:0:20}..."
        fi
    else
        echo "‚ùå Authentification √©chou√©e (Status: $auth_status)"
        echo "   - R√©ponse: $auth_body"
    fi
    
    echo ""
}

# Fonction principale
main() {
    check_current_schema
    
    echo "‚ö†Ô∏è ATTENTION: Recr√©ation du sch√©ma de base de donn√©es"
    echo "Cette op√©ration supprimera et recr√©era toutes les tables."
    echo "Les donn√©es seront sauvegard√©es et restaur√©es."
    echo "Voulez-vous continuer ? (y/N)"
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        backup_data
        recreate_schema
        restore_data
        cleanup_backups
        restart_backend
        test_system
    else
        echo "‚ùå Op√©ration annul√©e"
        echo "üí° Vous pouvez ex√©cuter le script √† nouveau pour recr√©er le sch√©ma"
    fi
    
    echo "üéØ CORRECTION TERMIN√âE"
    echo "====================="
}

# Ex√©cuter le script principal
main
