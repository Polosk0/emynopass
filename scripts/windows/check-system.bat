@echo off
title FileShare - Verification Systeme
color 0E
chcp 65001 >nul

echo.
echo [96m  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó[0m
echo [96m  ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù[0m
echo [96m     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   [0m
echo [96m     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   [0m
echo [96m     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   [0m
echo [96m     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   [0m
echo.
echo [93m        üîç V√âRIFICATION SYST√àME COMPL√àTE üîç[0m
echo.
echo =======================================

:: Aller √† la racine du projet
cd /d "%~dp0..\.."

:: V√©rifier qu'on est bien dans le bon dossier
if not exist "package.json" (
    echo [91m‚ùå Erreur: Impossible de trouver la racine du projet[0m
    echo [93m   Script ex√©cut√© depuis: %CD%[0m
    echo [93m   Veuillez ex√©cuter depuis la racine du projet FileShare[0m
    pause
    exit /b 1
)

set "all_ok=1"
set "warnings=0"

echo [94müîç [1/8] V√©rification des pr√©requis logiciels...[0m
echo.

:: Node.js
echo [96mNode.js:[0m
node --version >nul 2>&1
if errorlevel 1 (
    echo [91m     ‚ùå Node.js non install√©[0m
    echo [93m        T√©l√©charger: https://nodejs.org/[0m
    set "all_ok=0"
) else (
    for /f "tokens=*" %%i in ('node --version') do echo [92m     ‚úÖ %%i[0m
)

:: npm
echo [96mnpm:[0m
npm --version >nul 2>&1
if errorlevel 1 (
    echo [91m     ‚ùå npm non disponible[0m
    set "all_ok=0"
) else (
    for /f "tokens=*" %%i in ('npm --version') do echo [92m     ‚úÖ v%%i[0m
)

:: Docker
echo [96mDocker:[0m
docker --version >nul 2>&1
if errorlevel 1 (
    echo [91m     ‚ùå Docker non install√©[0m
    echo [93m        T√©l√©charger: https://www.docker.com/products/docker-desktop[0m
    set "all_ok=0"
) else (
    for /f "tokens=*" %%i in ('docker --version') do echo [92m     ‚úÖ %%i[0m
)

:: Docker Compose
echo [96mDocker Compose:[0m
docker-compose --version >nul 2>&1
if errorlevel 1 (
    echo [91m     ‚ùå Docker Compose non disponible[0m
    set "all_ok=0"
) else (
    for /f "tokens=*" %%i in ('docker-compose --version') do echo [92m     ‚úÖ %%i[0m
)

:: Git (optionnel)
echo [96mGit (optionnel):[0m
git --version >nul 2>&1
if errorlevel 1 (
    echo [93m     ‚ö†Ô∏è  Git non install√© (optionnel)[0m
    echo [93m        T√©l√©charger: https://git-scm.com/[0m
    set /a warnings+=1
) else (
    for /f "tokens=*" %%i in ('git --version') do echo [92m     ‚úÖ %%i[0m
)

echo.
echo [94müîå [2/8] V√©rification des ports...[0m
echo.

:: Port 3000 (Frontend)
netstat -an | findstr ":3000" >nul
if not errorlevel 1 (
    echo [93m     ‚ö†Ô∏è  Port 3000 occup√© (Frontend)[0m
    set /a warnings+=1
) else (
    echo [92m     ‚úÖ Port 3000 libre (Frontend)[0m
)

:: Port 3001 (Backend)
netstat -an | findstr ":3001" >nul
if not errorlevel 1 (
    echo [93m     ‚ö†Ô∏è  Port 3001 occup√© (Backend)[0m
    set /a warnings+=1
) else (
    echo [92m     ‚úÖ Port 3001 libre (Backend)[0m
)

:: Port 5432 (PostgreSQL)
netstat -an | findstr ":5432" >nul
if not errorlevel 1 (
    echo [93m     ‚ö†Ô∏è  Port 5432 occup√© (PostgreSQL)[0m
    set /a warnings+=1
) else (
    echo [92m     ‚úÖ Port 5432 libre (PostgreSQL)[0m
)

echo.
echo [94müíæ [3/8] V√©rification de l'espace disque...[0m
echo.

:: Espace disque (approximatif)
for /f "skip=1 tokens=3" %%a in ('wmic logicaldisk where "DeviceID='%~d0'" get FreeSpace') do (
    if not "%%a"=="" (
        set /a free_gb=%%a/1073741824
        if !free_gb! LSS 5 (
            echo [91m     ‚ùå Espace insuffisant: !free_gb!GB libre[0m
            echo [93m        Minimum recommand√©: 5GB[0m
            set "all_ok=0"
        ) else (
            echo [92m     ‚úÖ Espace suffisant: !free_gb!GB libre[0m
        )
        goto :disk_done
    )
)
:disk_done

echo.
echo [94müê≥ [4/8] V√©rification de Docker...[0m
echo.

docker info >nul 2>&1
if errorlevel 1 (
    echo [91m     ‚ùå Docker non d√©marr√©[0m
    echo [93m        Veuillez d√©marrer Docker Desktop[0m
    set "all_ok=0"
) else (
    echo [92m     ‚úÖ Docker op√©rationnel[0m
)

echo.
echo [94müìÅ [5/8] V√©rification de la structure du projet...[0m
echo.

:: Fichiers essentiels
set "files=package.json backend\package.json frontend\package.json docker-compose.yml"
for %%f in (%files%) do (
    if exist "%%f" (
        echo [92m     ‚úÖ %%f[0m
    ) else (
        echo [91m     ‚ùå %%f manquant[0m
        set "all_ok=0"
    )
)

echo.
echo [94müì¶ [6/8] V√©rification des d√©pendances...[0m
echo.

if exist "node_modules" (
    echo [92m     ‚úÖ D√©pendances racine install√©es[0m
) else (
    echo [93m     ‚ö†Ô∏è  D√©pendances racine non install√©es[0m
    set /a warnings+=1
)

if exist "backend\node_modules" (
    echo [92m     ‚úÖ D√©pendances backend install√©es[0m
) else (
    echo [93m     ‚ö†Ô∏è  D√©pendances backend non install√©es[0m
    set /a warnings+=1
)

if exist "frontend\node_modules" (
    echo [92m     ‚úÖ D√©pendances frontend install√©es[0m
) else (
    echo [93m     ‚ö†Ô∏è  D√©pendances frontend non install√©es[0m
    set /a warnings+=1
)

echo.
echo [94m‚öôÔ∏è  [7/8] V√©rification de la configuration...[0m
echo.

if exist ".env" (
    echo [92m     ‚úÖ Fichier .env pr√©sent[0m
) else (
    echo [93m     ‚ö†Ô∏è  Fichier .env manquant (sera cr√©√© automatiquement)[0m
    set /a warnings+=1
)

:: Dossiers de travail
set "dirs=uploads logs scripts"
for %%d in (%dirs%) do (
    if exist "%%d" (
        echo [92m     ‚úÖ Dossier %%d pr√©sent[0m
    ) else (
        echo [93m     ‚ö†Ô∏è  Dossier %%d manquant (sera cr√©√© automatiquement)[0m
        set /a warnings+=1
    )
)

echo.
echo [94müß™ [8/8] Test de connectivit√© r√©seau...[0m
echo.

:: Test de r√©solution DNS
nslookup google.com >nul 2>&1
if errorlevel 1 (
    echo [91m     ‚ùå Probl√®me de connectivit√© r√©seau[0m
    set "all_ok=0"
) else (
    echo [92m     ‚úÖ Connectivit√© r√©seau OK[0m
)

echo.
echo [96m========================================[0m

:: R√©sum√© final
if "%all_ok%"=="1" (
    if %warnings% EQU 0 (
        echo [92müéâ SYST√àME PARFAITEMENT CONFIGUR√â![0m
        echo.
        echo [92mVotre syst√®me est optimal pour FileShare.[0m
    ) else (
        echo [93m‚úÖ SYST√àME PR√äT AVEC %warnings% AVERTISSEMENT(S)[0m
        echo.
        echo [93mVotre syst√®me peut faire fonctionner FileShare.[0m
        echo [93mLes avertissements seront corrig√©s automatiquement.[0m
    )
    echo.
    echo [96müöÄ Commandes de d√©marrage:[0m
    echo [96m   ‚Ä¢ Mode simple:  scripts\windows\start-simple.bat[0m
    echo [96m   ‚Ä¢ Mode debug:   scripts\windows\start-debug.bat[0m
) else (
    echo [91m‚ùå PROBL√àMES CRITIQUES D√âTECT√âS![0m
    echo.
    echo [91mVeuillez corriger les erreurs ci-dessus avant de continuer.[0m
    echo.
    echo [96müìö Aide:[0m
    echo [96m   ‚Ä¢ Documentation: docs\INSTALLATION.md[0m
    echo [96m   ‚Ä¢ Support: Consultez les logs dans logs\[0m
)

echo [96m========================================[0m

:: Proposer de lancer le d√©marrage si tout va bien
if "%all_ok%"=="1" (
    echo.
    set /p "launch=Voulez-vous d√©marrer FileShare maintenant ? (Y/n): "
    if /i "!launch!"=="y" (
        echo.
        echo [96müöÄ Lancement du mode debug...[0m
        call scripts\windows\start-debug.bat
        exit /b 0
    ) else if /i "!launch!"=="" (
        echo.
        echo [96müöÄ Lancement du mode debug...[0m
        call scripts\windows\start-debug.bat
        exit /b 0
    )
)

echo.
pause