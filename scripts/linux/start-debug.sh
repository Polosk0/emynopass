#!/bin/bash

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Art ASCII
echo -e "${CYAN}"
echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
echo " ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù"
echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  "
echo " ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  "
echo " ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
echo " ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"
echo
echo -e "${PURPLE}                    üêõ MODE DEBUG COMPLET ACTIV√â üêõ${NC}"
echo -e "${PURPLE}                   Surveillance en temps r√©el des services${NC}"
echo
echo -e "${YELLOW}========================================================================${NC}"
echo -e "${YELLOW} Ce script va d√©marrer FileShare avec un monitoring complet:${NC}"
echo -e "${YELLOW} ‚úÖ Logs d√©taill√©s de chaque √©tape${NC}"
echo -e "${YELLOW} ‚úÖ Surveillance en temps r√©el des services${NC}"
echo -e "${YELLOW} ‚úÖ Dashboard interactif dans le terminal${NC}"
echo -e "${YELLOW} ‚úÖ D√©tection automatique des erreurs${NC}"
echo -e "${YELLOW} ‚úÖ V√©rifications de sant√© continues${NC}"
echo -e "${YELLOW}========================================================================${NC}"
echo

# Aller √† la racine du projet (2 niveaux au-dessus)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "$SCRIPT_DIR/../.."

# V√©rifier si on est dans le bon dossier
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Erreur: Impossible de trouver la racine du projet FileShare${NC}"
    echo -e "${YELLOW}   Script ex√©cut√© depuis: $(pwd)${NC}"
    echo -e "${YELLOW}   Racine attendue avec package.json${NC}"
    exit 1
fi

# V√©rifier Node.js
echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js requis! T√©l√©chargez sur https://nodejs.org/${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Node.js d√©tect√©${NC}"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm requis!${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ npm d√©tect√©${NC}"

# Message d'information
echo
echo -e "${CYAN}üöÄ D√©marrage du syst√®me de debug...${NC}"
echo -e "${YELLOW}üìã Un dashboard d√©taill√© va s'afficher avec:${NC}"
echo -e "${YELLOW}   ‚Ä¢ Statut en temps r√©el de tous les services${NC}"
echo -e "${YELLOW}   ‚Ä¢ Logs color√©s et horodat√©s${NC}"
echo -e "${YELLOW}   ‚Ä¢ M√©triques de performance${NC}"
echo -e "${YELLOW}   ‚Ä¢ URLs d'acc√®s et comptes de test${NC}"
echo
echo -e "${PURPLE}‚ö° Gardez cette fen√™tre ouverte pour surveiller le syst√®me!${NC}"
echo -e "${PURPLE}   Appuyez sur Ctrl+C pour arr√™ter tous les services proprement${NC}"
echo

# D√©marrer le debugger JavaScript
echo -e "${BLUE}üéõÔ∏è  Lancement du debugger principal...${NC}"
echo

# G√©rer les signaux pour cleanup
cleanup() {
    echo
    echo -e "${YELLOW}üõë Arr√™t demand√©...${NC}"
    echo -e "${BLUE}üßπ Nettoyage en cours...${NC}"
    
    # Arr√™ter les processus Node.js
    pkill -f "npm run dev" 2>/dev/null || true
    pkill -f "node.*backend" 2>/dev/null || true
    pkill -f "node.*frontend" 2>/dev/null || true
    
    # Arr√™ter Docker
    docker-compose stop 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
    exit 0
}

trap cleanup SIGINT SIGTERM

# D√©marrer le debugger
node scripts/debug/debug-start.js

# En cas d'erreur
if [ $? -ne 0 ]; then
    echo
    echo -e "${RED}‚ùå Le d√©marrage a √©chou√©!${NC}"
    echo
    echo -e "${YELLOW}üîß Solutions possibles:${NC}"
    echo -e "${YELLOW}   1. V√©rifiez que Docker Desktop est d√©marr√©${NC}"
    echo -e "${YELLOW}   2. V√©rifiez que les ports 3000 et 3001 sont libres${NC}"
    echo -e "${YELLOW}   3. Consultez les logs d√©taill√©s dans le dossier logs/${NC}"
    echo -e "${YELLOW}   4. Relancez ce script avec sudo si n√©cessaire${NC}"
    echo
    echo -e "${CYAN}üìÑ Log de debug sauv√© dans: logs/debug.log${NC}"
    echo
    exit 1
fi

echo
echo -e "${GREEN}üéâ Session de debug termin√©e!${NC}"
