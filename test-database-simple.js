const sqlite3 = require('sqlite3');
const path = require('path');
const fs = require('fs');

console.log('üîß [TEST] Test simple de la base de donn√©es...');

// Utiliser le m√™me chemin que dans Docker
const dbPath = '/app/data/emynopass.db';
const dataDir = path.dirname(dbPath);

console.log('üîß [TEST] Chemin de la base de donn√©es:', dbPath);
console.log('üîß [TEST] Dossier de donn√©es:', dataDir);

// Cr√©er le dossier s'il n'existe pas
if (!fs.existsSync(dataDir)) {
    console.log('üîß [TEST] Cr√©ation du dossier de donn√©es...');
    fs.mkdirSync(dataDir, { recursive: true });
}

console.log('üîß [TEST] Connexion √† SQLite...');

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå [TEST] Erreur connexion SQLite:', err);
        process.exit(1);
    }
    console.log('‚úÖ [TEST] Connexion SQLite √©tablie');
});

// Test de connectivit√©
console.log('üîß [TEST] Test de connectivit√©...');
db.get('SELECT 1', (err) => {
    if (err) {
        console.error('‚ùå [TEST] Erreur test connectivit√©:', err);
        process.exit(1);
    }
    console.log('‚úÖ [TEST] Connexion SQLite test√©e avec succ√®s');
    
    // Test de cr√©ation de table simple
    console.log('üîß [TEST] Cr√©ation d\'une table de test...');
    db.run(`
        CREATE TABLE IF NOT EXISTS test_table (
            id INTEGER PRIMARY KEY,
            name TEXT
        )
    `, (err) => {
        if (err) {
            console.error('‚ùå [TEST] Erreur cr√©ation table test:', err);
            process.exit(1);
        }
        console.log('‚úÖ [TEST] Table de test cr√©√©e avec succ√®s');
        
        // Test d'insertion
        console.log('üîß [TEST] Insertion de donn√©es de test...');
        db.run('INSERT INTO test_table (name) VALUES (?)', ['test'], (err) => {
            if (err) {
                console.error('‚ùå [TEST] Erreur insertion:', err);
                process.exit(1);
            }
            console.log('‚úÖ [TEST] Insertion r√©ussie');
            
            // Fermer la connexion
            db.close((err) => {
                if (err) {
                    console.error('‚ùå [TEST] Erreur fermeture:', err);
                } else {
                    console.log('‚úÖ [TEST] Test termin√© avec succ√®s');
                }
                process.exit(0);
            });
        });
    });
});

// Timeout de s√©curit√©
setTimeout(() => {
    console.error('‚ùå [TEST] Timeout - le test prend trop de temps');
    process.exit(1);
}, 10000);
